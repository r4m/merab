/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DataSensorsMsg'
 * message type.
 */

public class DataSensorsMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 144;

    /** Create a new DataSensorsMsg of size 13. */
    public DataSensorsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DataSensorsMsg of the given data_length. */
    public DataSensorsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg with the given data_length
     * and base offset.
     */
    public DataSensorsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg using the given byte array
     * as backing store.
     */
    public DataSensorsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DataSensorsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DataSensorsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg embedded in the given message
     * at the given base offset.
     */
    public DataSensorsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataSensorsMsg embedded in the given message
     * at the given base offset and length.
     */
    public DataSensorsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DataSensorsMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [voltage=0x"+Long.toHexString(get_voltage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity=0x"+Long.toHexString(get_humidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [par=0x"+Long.toHexString(get_par())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tsr=0x"+Long.toHexString(get_tsr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'id'
     */
    public short get_id() {
        return (short)getUIntBEElement(offsetBits_id(), 8);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(short value) {
        setUIntBEElement(offsetBits_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: voltage
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'voltage' is signed (false).
     */
    public static boolean isSigned_voltage() {
        return false;
    }

    /**
     * Return whether the field 'voltage' is an array (false).
     */
    public static boolean isArray_voltage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'voltage'
     */
    public static int offset_voltage() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'voltage'
     */
    public static int offsetBits_voltage() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'voltage'
     */
    public int get_voltage() {
        return (int)getUIntBEElement(offsetBits_voltage(), 16);
    }

    /**
     * Set the value of the field 'voltage'
     */
    public void set_voltage(int value) {
        setUIntBEElement(offsetBits_voltage(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'voltage'
     */
    public static int size_voltage() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'voltage'
     */
    public static int sizeBits_voltage() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (false).
     */
    public static boolean isSigned_temperature() {
        return false;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'temperature'
     */
    public int get_temperature() {
        return (int)getUIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(int value) {
        setUIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity' is signed (false).
     */
    public static boolean isSigned_humidity() {
        return false;
    }

    /**
     * Return whether the field 'humidity' is an array (false).
     */
    public static boolean isArray_humidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity'
     */
    public static int offset_humidity() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity'
     */
    public static int offsetBits_humidity() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'humidity'
     */
    public int get_humidity() {
        return (int)getUIntBEElement(offsetBits_humidity(), 16);
    }

    /**
     * Set the value of the field 'humidity'
     */
    public void set_humidity(int value) {
        setUIntBEElement(offsetBits_humidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity'
     */
    public static int size_humidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity'
     */
    public static int sizeBits_humidity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: par
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'par' is signed (false).
     */
    public static boolean isSigned_par() {
        return false;
    }

    /**
     * Return whether the field 'par' is an array (false).
     */
    public static boolean isArray_par() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'par'
     */
    public static int offset_par() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'par'
     */
    public static int offsetBits_par() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'par'
     */
    public int get_par() {
        return (int)getUIntBEElement(offsetBits_par(), 16);
    }

    /**
     * Set the value of the field 'par'
     */
    public void set_par(int value) {
        setUIntBEElement(offsetBits_par(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'par'
     */
    public static int size_par() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'par'
     */
    public static int sizeBits_par() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tsr
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tsr' is signed (false).
     */
    public static boolean isSigned_tsr() {
        return false;
    }

    /**
     * Return whether the field 'tsr' is an array (false).
     */
    public static boolean isArray_tsr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tsr'
     */
    public static int offset_tsr() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tsr'
     */
    public static int offsetBits_tsr() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'tsr'
     */
    public int get_tsr() {
        return (int)getUIntBEElement(offsetBits_tsr(), 16);
    }

    /**
     * Set the value of the field 'tsr'
     */
    public void set_tsr(int value) {
        setUIntBEElement(offsetBits_tsr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'tsr'
     */
    public static int size_tsr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tsr'
     */
    public static int sizeBits_tsr() {
        return 16;
    }

}
